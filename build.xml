<!-- 
/* ==========================================
 * JGraphT : a free Java graph-theory library
 * ==========================================
 *
 * Project Info:  http://jgrapht.sourceforge.net/
 * Project Lead:  Barak Naveh (http://sourceforge.net/users/barak_naveh)
 *
 * (C) Copyright 2003-2004, by Barak Naveh and Contributors.
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 */
/* ~~~~~~~~~
 * build.xml
 * ~~~~~~~~~
 * (C) Copyright 2003-2004, by Barak Naveh and Contributors.
 *
 * Original Author:  Barak Naveh
 * Contributor(s):   John V. Sichi
 *
 * $Id$
 *
 * Changes
 * ~~~~~~~
 * 24-Jul-2003 : Initial revision (BN);
 * 15-Aug-2003 : Used wildcards instead of enumerating files(JVS);
 * 15-Aug-2003 : Added checkstyle task (JVS);
 * 15-Aug-2003 : Used JUnit batch test feature (JVS);
 * 15-Aug-2003 : Added jalopy task (JVS);
 * 03-Sep-2003 : Add etags support (JVS);
 * 24-Feb-2004 : Removed duplicates and cleaned code (BN);
 *
 */
-->

<!--
/**
 * An ANT build file for JGraphT (use Ant 1.5.1 and above).
 * Before running this script, make sure that the libraries used by JGraphT are
 * found under ./lib directory. This script will create directories ./build 
 * and ./testbuild for generated classfiles. These can be removed at any time 
 * via the 'clean' target.  A temporary ./distribution directory is created 
 * when building a distribution. A ./javadoc directory is created for the 
 * Javadoc HTML pages. 
 *
 * This script was originally based on a nice script written by David Gilbert.
 *
 * @author Barak Naveh
 * @author John V. Sichi
 *
 * @since 24-Jul-2003
 */
-->

<project name="jgrapht" default="all" basedir=".">

    <!-- Initialization. -->
    <target name="init" description="Initializes required settings.">
        <tstamp />
        <echo>JAVA_HOME=${java.home}</echo>
        <property name="project.name"     value="jgrapht" />
        <property name="project.version"  value="0.5.2" />
        <property name="project.prefix"   value="${project.name}-${project.version}" />

        <!-- Directories -->
        <property name="build.dir"        value="${basedir}/build" />
        <property name="testbuild.dir"    value="${basedir}/testbuild" />
        <property name="distrib.dir"      value="${basedir}/distribution"/>
        <property name="src.dir"          value="${basedir}/src"/>
        <property name="testsrc.dir"      value="${basedir}/testsrc"/>
        <property name="lib.dir"          value="${basedir}/lib"/>
        <property name="etc.dir"          value="${basedir}/etc"/>
        <property name="javadoc.dir"      value="${basedir}/javadoc"/>

		<!-- File names -->
        <property name="project.jar.name" value="${project.prefix}.jar" />
        <property name="project.tar.name" value="${project.prefix}.tar" />
        <property name="project.tar.gz.name" value="${project.prefix}.tar.gz" />
        <property name="project.zip.name" value="${project.prefix}.zip" />
        <property name="build.file.name"  value="build.xml" />
        <property name="junit.jar.name"   value="junit.jar" />
        <property name="jgraph.jar.name"  value="jgraph.jar" />

		<!-- Files -->
        <property name="project.jar"      value="${basedir}/${project.jar.name}" />
        <property name="project.tar"      value="${basedir}/${project.tar.name}" />
        <property name="project.tar.gz"   value="${basedir}/${project.tar.gz.name}" />
        <property name="project.zip"      value="${basedir}/${project.zip.name}" />
        <property name="junit.jar"        value="${lib.dir}/${junit.jar.name}"/>
        <property name="jgraph.jar"       value="${lib.dir}/${jgraph.jar.name}"/>
        <property name="checkstyle.jar"   value="${lib.dir}/checkstyle-all-3.1.jar"/>
        <property name="build.file"       value="${basedir}/${build.file.name}"/>
        <property name="checkstyle.settings" value="${etc.dir}/checkstyle-settings.xml"/>
        <property name="jalopy.settings"  value="${etc.dir}/jalopy-settings.xml"/>


        <!-- Classpath for building functional sources. -->
        <path id="build.classpath">
            <pathelement location="${junit.jar}"/>
            <pathelement location="${jgraph.jar}"/>
        </path>
        <property name="build.classpath" refid="build.classpath"/>

        <!-- Classpath for building tests. -->
        <path id="testbuild.classpath">
            <pathelement path="${build.classpath}"/>
            <pathelement location="${build.dir}"/>
        </path>
        <property name="testbuild.classpath" refid="testbuild.classpath"/>

        <!-- Classpath for running tests. -->
        <path id="test.classpath">
            <pathelement path="${testbuild.classpath}"/>
            <pathelement location="${testbuild.dir}"/>
        </path>
    </target>


    <!-- Compile the JGraphT classes -->
    <target name="compile" depends="init"
                           description="Compiles the JGraphT source code.">

        <!-- create a build directory -->
        <mkdir dir="${build.dir}" />

        <!-- compile the source -->
        <javac srcdir="${src.dir}" destdir="${build.dir}" target="1.3">
            <classpath refid="build.classpath" />
            <include name="**/*.java"/>
            <exclude name="org/_3pq/jgrapht/experimental/**/*.java"/>
        </javac>
    </target>


    <!-- Generate the JGraphT runtime jar -->
    <target name="jar" depends="compile" 
                       description="Creates the runtime jar.">
        <jar jarfile="${project.jar}" basedir="${build.dir}" />
    </target>


    <!-- Build all JUnit tests -->
    <target name="test.compile" depends="compile"
                                description="Builds all JUnit tests.">
        <!-- create a test build directory -->
        <mkdir dir="${testbuild.dir}" />

        <javac srcdir="${testsrc.dir}" destdir="${testbuild.dir}" target="1.3">
            <classpath refid="testbuild.classpath" />
            <include name="org/_3pq/jgrapht/**"/>
            <exclude name="org/_3pq/jgrapht/experimental/**"/>
        </javac>
    </target>

    <!-- Run all JUnit tests -->
    <target name="test" depends="test.compile"
                        description="Builds and runs all JUnit tests.">
        <junit printsummary="no" fork="yes" 
                           haltonerror="true" haltonfailure="true">
            <classpath refid="test.classpath"/>
            <formatter type="brief" usefile="no" />
            <batchtest>
                <fileset dir="${testsrc.dir}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/Abstract*Test.java"/>
                    <exclude name="**/Default*Test.java"/>
		            <exclude name="org/_3pq/jgrapht/experimental/**/*.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- Run checkstyle on source code -->
    <!-- TODO:  once code is all clean, use as a dependency for "all" task -->
    <target name="checkstyle" depends="init"
                           description="Runs checkstyle on all source code.">
        <taskdef resource="checkstyletask.properties" 
        		 classpath="${checkstyle.jar}"/>
        <checkstyle config="${checkstyle.settings}">
            <fileset dir="${basedir}">
                <include name="src/**/*.java"/>
                <include name="testsrc/**/*.java"/>
            </fileset>
        </checkstyle>
    </target>

    <!-- Run jalopy on source code                                         -->
    <!-- NOTE:  requires manual installation of .jars in lib/jalopy        -->
    <!-- WARNING:                                                          -->
    <!--   to workaround a bug in jalopy you need to edit your ant/bin/ant -->
	<!--   or ant/bin/ant.bat script and add the -server option when it    -->
	<!--   runs java. this prevents jalopy from eating memory.             -->
    <target name="jalopy" depends="compile"
            description="Runs jalopy on all source code (see WARNING comment).">
        <taskdef name="jalopy" 
                 classname="de.hunsicker.jalopy.plugin.ant.AntPlugin">
            <classpath>
                <fileset dir="${basedir}/lib/jalopy">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </taskdef>
        <jalopy backup="true" convention="${jalopy.settings}"
                classpathref="testbuild.classpath" history="FILE">
            <fileset dir="${basedir}">
                <include name="src/**/*.java"/>
                <include name="testsrc/**/*.java"/>
            </fileset>
        </jalopy>
    </target>

    <!-- Generate the JGraphT JavaDoc HTML pages -->
    <target name="javadoc" depends="init" 
                           description="Creates the Javadocs.">
        <delete dir="${javadoc.dir}" />
        <mkdir dir="${javadoc.dir}" />
        <javadoc destdir="${javadoc.dir}" 
        		 access="protected" 
                 windowtitle="JGraphT : a free Java graph-theory library"
                 overview="${src.dir}/overview.html">
            <classpath refid="build.classpath" />
            
            <packageset dir="${src.dir}" defaultexcludes="yes">
                <include name="**"/>
	            <exclude name="org/_3pq/jgrapht/experimental/**"/>
            </packageset>
        </javadoc>
    </target>


    <!-- Creates the distribution directory of JGraphT -->
    <!-- Helper target that is called from zip and targz targets -->
	<target name="create.distribution">
	
        <!-- make a temporary distribution directory -->
        <mkdir dir="${distrib.dir}" />

        <!-- add README -->
        <copy file="${basedir}/README.html" tofile="${distrib.dir}/README.html" />

        <!-- add license -->
        <copy file="${basedir}/license-LGPL.txt" tofile="${distrib.dir}/license-LGPL.txt" />

        <!-- add runtime jar file -->
        <copy file="${project.jar}" tofile="${distrib.dir}/${project.jar.name}" />
    
        <!-- add source files -->
        <copy todir="${distrib.dir}/src">
            <fileset dir="${src.dir}">
                <include name="overview.html"/>
                <include name="**/*.java"/>
                <include name="**/package.html"/>
	            <exclude name="org/_3pq/jgrapht/experimental/**"/>
            </fileset>
        </copy>

        <!-- add source files of unit tests -->
        <copy todir="${distrib.dir}/testsrc">
            <fileset dir="${testsrc.dir}">
                <include name="**"/>
                <exclude name="org/_3pq/jgrapht/experimental/**"/>
            </fileset>
        </copy>

        <!-- add lib files -->
        <copy todir="${distrib.dir}/lib">
            <fileset dir="${lib.dir}">
                <include name="${junit.jar.name}"/>
                <include name="${jgraph.jar.name}"/>
                <include name="lib-readme.txt"/>
            </fileset>
        </copy>

        <!-- add ant build file (this file) -->
        <copy file="${build.file}" tofile="${distrib.dir}/${build.file.name}" />

        <!-- add etc files -->
        <copy todir="${distrib.dir}/etc">
            <fileset dir="${etc.dir}">
                <include name="checkstyle-settings.xml"/>
                <include name="etc-readme.txt"/>
                <include name="jalopy-settings.xml"/>
            </fileset>
        </copy>

        <!-- add Javadoc files -->
        <copy todir="${distrib.dir}/javadoc">
            <fileset dir="${javadoc.dir}"/>
        </copy>
    </target>
	

    <!-- Make .zip distribution for JGraphT -->
    <target name="zip" depends="jar"
    				   description="Creates a .zip distribution.">

		<antcall target="create.distribution" />

        <!-- convert end-of-line characters in text files to PC style -->
        <fixcrlf srcdir="${distrib.dir}/src"     eol="crlf" eof="remove" />
        <fixcrlf srcdir="${distrib.dir}/testsrc" eol="crlf" eof="remove" />
        <fixcrlf srcdir="${distrib.dir}/etc"     eol="crlf" eof="remove" />

        <!-- make the zip file -->
        <zip zipfile="${project.zip}">
             <zipfileset dir="${distrib.dir}" prefix="${project.prefix}" />
        </zip>

        <!-- delete the temporary distribution directory -->
        <delete dir="${distrib.dir}" />
    </target>


    <!-- Make .tar.gz distribution for JGraphT -->
    <target name="targz" depends="jar"
                         description="Creates a tar.gz distribution.">

		<antcall target="create.distribution" />
        
        <!-- convert end-of-line characters in text files to Unix style -->
        <fixcrlf srcdir="${distrib.dir}/src"     eol="lf" eof="remove" />
        <fixcrlf srcdir="${distrib.dir}/testsrc" eol="lf" eof="remove" />
        <fixcrlf srcdir="${distrib.dir}/etc"     eol="lf" eof="remove" />

        <!-- make the tar.gz file -->
        <tar tarfile="${project.tar}">
             <tarfileset dir="${distrib.dir}" prefix="${project.prefix}" />
        </tar>
        <gzip zipfile="${project.tar.gz}" src="${project.tar}" />
        <delete file="${project.tar}" />

        <!-- delete the temporary distribution directory -->
        <delete dir="${distrib.dir}" />
    </target>
    

	<!-- Clean outputs from previous build -->    
	<target name="clean" depends="init"
			description="Cleans all outputs from previous builds">
        <delete dir="${distrib.dir}" />
        <delete dir="${build.dir}" />
        <delete dir="${testbuild.dir}" />
        <delete dir="${javadoc.dir}" />
        <delete file="${project.jar}" />
        <delete file="${project.zip}" />
        <delete file="${project.tar.gz}" />
	</target>


	<!-- Clean unnecessary outputs from this build -->    
	<target name="postclean" depends="init"
			description="Cleans unnecessary outputs from this build">
        <delete dir="${javadoc.dir}" />
        <delete file="${project.jar}" />
	</target>


    <!-- ALL -->
    <target name="all" 
            depends="clean,compile,test,javadoc,zip,targz,postclean"
            description="Cleans, compiles and tests JGraphT, builds the jar, generates Javadocs and creates distribution files (.zip and .tar.gz).">
    </target>

    <!-- generate Emacs tags -->
    <fileset dir="${basedir}" id="fileset.taggable">
        <include name="src/**/*.java"/>
        <include name="testsrc/**/*.java"/>
    </fileset>
    <target name="etags" 
            depends="init" 
            description="Generates TAGS file for Emacs">
        <property name="file.taggable.tmp" 
            location="${basedir}/taggedfiles"/>
        <antcall target="tags.find_taggable_files"/>
        <exec dir="${basedir}" executable="ctags">
            <arg line="-e"/>
            <arg line="-L taggedfiles"/>
        </exec>
        <delete file="${file.taggable.tmp}" quiet="true"/>
    </target>

    <!-- Helper for etags target -->
    <target name="tags.find_taggable_files">
        <concat destfile="${file.taggable.tmp}">replaceme</concat>
        <pathconvert property="files.taggable" 
          pathsep="${line.separator}"
          dirsep="/" refid="fileset.taggable" >
          <map from="${basedir}" to="." />
        </pathconvert>
        <replace file="${file.taggable.tmp}" 
          token="replaceme" value="${files.taggable}" />
        <fixcrlf srcDir="${basedir}" includes="taggedfiles"
          eol="lf" eof="remove" />
    </target>

</project>
